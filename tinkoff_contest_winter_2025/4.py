"""Герман немного устал. Вот бы кто-нибудь сделал за него домашнее задание...
Задача, которую необходимо решить Герману, звучит следующим образом. Дана последовательность a_1, a_2, ..., a_n и числа x, y, z.
Разрешается произвольное количество (в том числе ноль) раз выполнить следующую операцию: выбрать произвольное i (1<=i<=n) и увеличить a_i на единицу.
Необходимо, чтобы хотя бы один элемент из последовательности делился на x, хотя бы один элемент делился на y и хотя бы один элемент делился на z. Разрешается, чтобы для разных значений из набора x, y, z подходил один и тот же элемент из последовательности.
Помогите Герману отдохнуть перед сессией и найдите минимальное количество операций, которое необходимо выполнить, чтобы условие стало выполнено.

Формат входных данных:
Первая строка содержит числа n (1<=n<=2*10^5), x, y, z (1<=x,y,z<=10^6).
Вторая строка содержит n чисел a_i (1<=a_i<=10^18).

Формат выходных данных:
Выведите одно число — минимальное количество операций, которое надо выполнить, чтобы для каждого из чисел x, y, z был хотя бы один элемент в последовательности, кратный данному числу.

Пример данных:

Ввод
6 10 20 30
8 17 5 28 39 13

Вывод
3

Комментарий к примеру
В примере можно дважды увеличить a_4 и один раз увеличить a_5. Тогда на 10 будет делиться a_4, на 20 будет делиться a_5, на 30 будет делиться a_4."""


def get_operations_to_divisible(num, divisor):
    return (divisor - (num % divisor)) % divisor

def solve(n, x, y, z, numbers):
    # Для каждого числа посчитаем, сколько операций нужно для кратности x, y, z
    operations = []
    for num in numbers:
        ops = {
            'x': get_operations_to_divisible(num, x),
            'y': get_operations_to_divisible(num, y),
            'z': get_operations_to_divisible(num, z)
        }
        operations.append(ops)
    
    # Найдем минимальное количество операций
    min_ops = float('inf')
    
    # Перебираем все возможные комбинации
    for i in range(n):
        for j in range(n):
            for k in range(n):
                # Проверяем все возможные назначения делителей числам
                current_ops = operations[i]['x']
                if i != j:
                    current_ops += operations[j]['y']
                else:
                    if operations[i]['x'] != operations[j]['y']:
                        current_ops += operations[j]['y']
                if i != k and j != k:
                    current_ops += operations[k]['z']
                else:
                    if i == k:
                        if operations[i]['x'] != operations[k]['z']:
                            current_ops += operations[k]['z']
                    elif j == k:
                        if operations[j]['y'] != operations[k]['z']:
                            current_ops += operations[k]['z']

                min_ops = min(min_ops, current_ops)
    
    return min_ops

n, x, y, z = map(int, input().split())
numbers = list(map(int, input().split()))

print(solve(n, x, y, z, numbers))

# n, x, y, z = 6, 10, 15, 30
# numbers = [8, 17, 5, 28, 39, 13]

# Дана таблица вида
# [a_1, b_1, c_1]
# [a_2, b_2, c_2]
# [a_3, b_3, c_3]

# Нужно найти такие a_i, b_j, c_k, чтобы a_i + b_j + c_k было минимально.
# При i, j и k могут быть равны друг другу только тогда, когда a_i = b_j = c_k.

# Пример 1:
# [1, 3, 3]
# [4, 2, 6]
# [7, 8, 2]
# Ответ: 1 + 2 + 2 = 5

# Пример 2:
# [1, 3, 3]
# [4, 9, 6]
# [7, 9, 2]
# Ответ: 4 + 3 + 2 = 9 (примечание: хоть a_1 - минимальное, но оно заблокирует b_1, которое минимальное в своём столбце, что приведёт к увеличению ответа)

# Пример 3:
# [3, 3, 3]
# [2, 2, 6]
# [7, 8, 2]
# Ответ: 2 + 2 + 2 = 6 (примечание: здесь мы можем взять a_2 и b_2 так как они равны и минимальны в своих столбцах)